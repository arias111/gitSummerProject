
import UIKit

class ViewController: UIViewController {
    
    @IBOutlet weak var habbitsTableGood: UICollectionView!
    @IBOutlet weak var habbitsTableBad: UICollectionView!
    
    let cellIDGood = "cellIDGood"
    let cellIDBad = "cellIDBad"
    
    let defaults = UserDefaults.standard
    
    @IBOutlet weak var weatherImage: UIImageView!
    @IBOutlet weak var weatherDegrees: UILabel!
    @IBOutlet weak var weatherText: UILabel!
    @IBOutlet weak var weatherVar: UILabel!
    
    @IBOutlet weak var vredText: UILabel!
    @IBOutlet weak var vredImage: UIImageView!
    
    let date = Date()
    let calendar = Calendar.current
    var minus = 0
    
    @IBOutlet weak var drops: UILabel!
    @IBOutlet weak var treeImage: UIImageView!
    
//    –¥–µ—Ä–µ–≤—å—è
    var listTree: [UIImage?] = [
        UIImage(named: "tree#1"),
        UIImage(named: "tree#2"),
        UIImage(named: "tree#3"),
        UIImage(named: "tree#4"),
        UIImage(named: "tree#5"),
        UIImage(named: "tree#6")
    ]

    
//    –æ–±–Ω–æ–≤–∏—Ç—å
    @IBAction func refresh(_ sender: Any) {
        let x = Tree.share.userData.drops
        reloadTree()
        drops.text = "–ö–∞–ø–µ–ª—å:\( x )"
        viewWillAppear(true)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
//        —É–¥–∞–ª—è—é –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–¥–æ–º
        defaults.removeObject(forKey: "HabbitArray")
        defaults.synchronize()
        defaults.removeObject(forKey: "userData")
        defaults.synchronize()
        
//        –∑–∞–¥–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Tree.share.saveData(name: "Rustem", drops: 10, image: "")
        
//        –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        habbitsTableGood.dataSource = self
        habbitsTableGood.delegate = self
        
        habbitsTableBad.dataSource = self
        habbitsTableBad.delegate = self
        
//        –µ—Å–ª–∏ –¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ .xib
        habbitsTableGood.register(UINib(nibName: "HabbitCell", bundle: nil) , forCellWithReuseIdentifier: cellIDGood)
        habbitsTableBad.register(UINib(nibName: "HabbitCell", bundle: nil) , forCellWithReuseIdentifier: cellIDBad)
        
//        –¥–ª—è –ø–æ–≥–æ–¥—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        let day = calendar.component(.day, from: date)
            let hour = calendar.component(.hour, from: date)
            let month = calendar.component(.month, from: date)
            minus = weatherDo(sender:day,hour:hour,month:month);
            weatherVar.text = String(minus)
            minus = minus + vredDo(day:day)
        Tree.share.userData.drops = Tree.share.userData.drops + minus
        
//        –≤—ã–∑–æ–≤ –¥–µ—Ä–µ–≤–∞
        reloadTree()
    }
    
    // MARK: - Plus
    
//    –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ +
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "GoToGood" {
        let newVC = segue.destination as! NewHabbit
            newVC.textHab = "–ù–û–í–ê–Ø –ü–û–õ–ï–ó–ù–ê–Ø –ü–†–ò–í–´–ß–öA"
        }
        if segue.identifier == "GoToBad" {
        let newVC = segue.destination as! NewHabbit
            newVC.textHab = "–ù–û–í–ê–Ø –í–†–ï–î–ù–ê–Ø –ü–†–ò–í–´–ß–öA"
        }
    }
    
//    –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.habbitsTableGood.reloadData()
        self.habbitsTableBad.reloadData()
    }
    
    // MARK: - Weather
//    –ø–æ–≥–æ–¥–∞
    func weatherDo(sender:Int,hour:Int,month:Int) -> Int{
        
//        –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞
         let weather = (sender * (31-sender) * (13 - month))%30
        weatherDegrees.text = String(weather)
        
//        –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–Ω–∏
         var time:Int
        if((month > 9)&&(month < 4)){
            time = 14
        } else {
            time = 17
        }
        
//        —Ü–≤–µ—Ç –ø–æ–≥–æ–¥—ã
        if(hour > time) {
            weatherImage.image = UIImage(named: "weather-night")
        } else {
            weatherImage.image = UIImage(named: "weather-day")
        }
        
//        —Ç–µ–∫—Å—Ç –ø–æ–≥–æ–¥—ã
        switch weather {
        case 1...6:
            weatherText.text = "–•–æ–ª–æ–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞"
            return -0
        case 7...9:
            weatherText.text = "–•–æ–ª–æ–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞"
            return -1
        case 10...15:
            weatherText.text = "–ü—Ä–æ—Ö–ª–∞–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞"
            return -2
        case 16...21:
            weatherText.text = "–•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞"
            return -3
        case 21...30:
            weatherText.text = "–ñ–∞—Ä–∫–∞—è –ø–æ–≥–æ–¥–∞"
            return -4
        default:
            weatherText.text = "–•–æ–ª–æ–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞"
            return -0;
        }
    }
    
    // MARK: - Vred
    
//    –≤—Ä–µ–¥–∏—Ç–µ–ª–∏
    func vredDo(day:Int) -> Int{
        let vred:Int
        
//        —Ü–≤–µ—Ç –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π
        switch day {
        case 9...13:
            vred = -2;
        default:
            vred = 0;
        }
        
//        —Ç–µ–∫—Å—Ç –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π
        if(vred == 0){
            vredText.text = "—É–∂–µ —Å–æ–≤—Å–µ–º‚Ä® —Å–∫–æ—Ä–æ"
            vredImage.image = UIImage(named: "noVred")
        } else {
            vredText.text = "–Ω–∞—á–∞–ª—Å—è -2üíß"
            vredImage.image = UIImage(named: "yesVred")
        }
        return vred
    }
    
    
}

// MARK: - Habbits

//–¥–ª—è –ø–ª–∞—à–µ–∫
extension ViewController: UICollectionViewDataSource, UICollectionViewDelegate,UICollectionViewDelegateFlowLayout{

//    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—à–µ–∫
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        print("goodArraycount1 \(Habbits.share.GoodHabbitsArray.count)")
        print("badArraycount1 \(Habbits.share.BadHabbitsArray.count)")
        
        if(collectionView == habbitsTableGood){
            print("GoodArraycount\(Habbits.share.GoodHabbitsArray.count)")
            if (Habbits.share.GoodHabbitsArray.count >= 8) {
            return 8;
        } else {
            return Habbits.share.GoodHabbitsArray.count
        }
        } else{
            print("badArraycount\(Habbits.share.BadHabbitsArray.count)")
            if (Habbits.share.BadHabbitsArray.count >= 8) {
                return 8;
            } else {
                return Habbits.share.BadHabbitsArray.count
            }
        }
    }
    
//    –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞—à–µ–∫
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if (collectionView == habbitsTableGood)&&(Habbits.share.GoodHabbitsArray.count != 0) {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellIDGood, for: indexPath) as! HabbitCell
        cell.text.text = Habbits.share.GoodHabbitsArray[indexPath.item].name
        cell.color.backgroundColor = UIColor.green
//        –∑–∞–¥–∞–¥–∞–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        cell.piority = Habbits.share.GoodHabbitsArray[indexPath.item].priority
            print("good")
        return cell
        } else {
                    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellIDBad, for: indexPath) as! HabbitCell
                    cell.text.text = Habbits.share.BadHabbitsArray[indexPath.item].name
                    cell.color.backgroundColor = UIColor.red
            //        –∑–∞–¥–∞–¥–∞–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    cell.piority = Habbits.share.BadHabbitsArray[indexPath.item].priority
                    return cell
        }
    }
    
//    —Ä–∞–º–µ—Ä—ã –ø–ª–∞—à–µ–∫
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
//        —Ä–∞–∑–º–µ—Ä –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ = 400 , –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ = 5*10,
        return CGSize(width: 85, height: 70)
    }
    
    
    
    // MARK: - Tree
                                    
//     –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∏—Å—Ö–æ–¥—è –∏–∑ –∫–æ–ª-–≤–∞ –∫–∞–ø–µ–ª—å
       func reloadTree()  {
        var index = 0
        let value = Tree.share.userData.drops
        
        switch value {
            case 0...10 :
                index = 0
            case 11...20 :
                index = 1
            case 21...30 :
                index = 2
            case 31...40 :
                index = 3
            case 41...50:
                index = 4
            case 51...INTPTR_MAX:
                index = 5
            
            default:
                index = 0
        }
           self.treeImage.image = self.listTree[index]
       }
    
    
    
}

